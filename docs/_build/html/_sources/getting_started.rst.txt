.. _Getting_Started_Page:

***************
Getting Started
***************

System Requirement
##################

Hardware
  A modern PC with at least 8GB RAM or a computing cluster.

Operating Systems
  EllipTrack has been tested in Windows (7 and later), Linux (CentOS 7), and Mac OS X (10.12 and later).

Software
  EllipTrack requires Matlab R2017a or later. 
  Required toolboxes include Statistics and Machine Learning Toolbox, Optimization Toolbox, and Imaging Processing Toolbox.
  
  In addition, a C++ compiler with C++11 support should be installed in Matlab. 
  Use the command ``mex -setup`` to check the status of installed compilers. 
  Matlab offers a free minGW compiler which can be installed following the instruction here_.

Input Files
###########

Movies
******

Movies should be stored in either TIFF (.tif or .TIFF) or Nikon ND2 (.nd2) format.

TIFF Format
  Movies should be saved as a sequence of image files, where each file stores the captured image from one channel at one time point. 
  
  Files should be named with the following convention

  ::

    RowID_ColID_SiteID_Channel_FrameID.tif

  where *RowID* and *ColID* refer to the coordinates of the well in a multi-well plate; 
  *SiteID* refers to the imaging site within the well (in case multiple fields of view are imaged); 
  *Channel* refers to the imaging filter;
  and *FrameID* refers to the time point.
  
  For example, an image with filename

  ::

    1_2_3_CFP_4.tif

  indicates that the movie is captured in the third imaging site of well A02, and that the file stores the fourth captured image from the *CFP* channel.

Nikon ND2 Format
  It is possible to directly analyze the ND2 files generated by Nikon NIS-Elements. The BioformatsImage_ toolbox should be installed. 
  
Camera Dark Noise and Illumination Bias (Optional)
***************************************************

EllipTrack can remove camera dark noise and correct illumination bias for each image.

Camera Dark Noise (CMOS Offset)
  A Matlab data file (.mat) with a single matrix called *cmosoffset*. 
  *cmosoffset* should have the same dimension as the images. Each element stores the values of camera noises at the corresponding pixel.
  
  To generate this information, capture a few images of an empty well with the lasers being switched off. 
  Since no substance is illuminated, the pixel intensities reflect the values of camera dark noises at the time of capture.
  
  Assume that the images are stored in a Matlab cell array called *all_images* such that ``all_images{i}`` stores the i-th captured image.
  Use the following script to generate *cmosoffset*.
  
  .. code-block:: matlab

     cmosoffset = zeros(size(all_images{1})); % initialize the matrix
     for i=1:length(all_images) % adding the intensity values of each image
         cmosoffset = cmosoffset + double(all_images{i});
     end
     cmosoffset = cmosoffset / length(all_images); % average the intensities
     save('cmosoffset.mat', 'cmosoffset'); % generate the Matlab data file

Illumination Bias (Bias)
  Illumination bias refers to the uneven illumination of lasers within the field of view. 
  Pixel intensities in the region with stronger illumination are systematically higher than the ones in the region with weaker illumination.
  Correction of illumination bias is therefore essential to ensure that pixel intensities from all regions of the images are comparable.
  This procedure is also known as "shading correction".
  
  Illumination bias is fluorescence channel-dependent.
  For each channel, a Matlab data file (.mat) with a single matrix called *bias* should be provided. 
  The elements of *bias* store the pixel intensities normalized by the average pixel intensity of the image.
  
  To generate this information, capture a few images of a well containing only medium in the channel of interest. 
  The exposure time should be selected such that the pixel intensities are significantly higher than the camera dark noises but significantly lower than the saturation level.
  The pixel intensities of captured images are the sum of the camera dark noise and the signal of the channel.
  To compute illumination bias, first subtract the camera dark noises from the images, then normalize the image such that the average pixel intensity becomes one.

  Assume that the images are stored in a Matlab cell array called *all_images* such that ``all_images{i}`` stores the i-th captured image.
  Use the following script to generate *bias*.

  .. code-block:: matlab

     bias = zeros(size(all_images{1})); % initialize the matrix
         for i=1:length(all_images) % compute the bias from each image
             temp = double(all_images{i}) - cmosoffset; % subtract camera dark noise
             temp = temp / mean(temp(:)); % normalize the image
             bias = bias + temp;
        end
     bias = bias / length(all_images); % average the bias calculated from each image
     save('bias.mat', 'bias');
  
Perform Correction
  Removal of camera dark noises and correction of illumination bias will be performed as follows

  .. code-block:: matlab

     I = (double(I) - cmosoffset) ./ bias;

  where *I* refers to an image and the operation ``./`` refers to elementwise-division. 

Installation
############

Download
********

Download the latest version of EllipTrack from the `Github repository`_.

Overview of Files
*****************

EllipTrack contains the following files

*  *mainfile.m*. Global controller of EllipTrack. Refer to :ref:`Execution_Page`.
*  *parameters.m*. Parameters of EllipTrack. Refer to :ref:`Parameters_Page`.
*  *plot_full_lineages.m*. Generate heatmaps of cell lineage trees. Refer to :ref:`Execution_Page`.
*  *functions*. Folder containing customized functions of EllipTrack. This folder also contains a copy of the BioformatsImage_ toolbox.
*  *GUI*. Folder containing Parameter Generator GUI and Training Data Generator GUI. Refer to :ref:`GUI_Page`.
*  *modified_mia_library*. Folder containing scripts adapted from Zafari *et al.* 2015 for ellipse fitting.

Compile *generate_tracks.cpp*
*****************************

*generate_tracks.cpp* is the function for constructing cell tracks, and it is implemented in C++ for speed consideration.
This file needs to be compiled before execution. The procedure for compilation is

*  Use ``mex -setup`` to check whether Matlab has an available C++ compiler.
*  Navigate Matlab to the `functions` folder.
*  Execute the following command

   .. code-block:: matlab
   
      mex -largeArrayDims generate_tracks.cpp

*  Compilation finishes if the following message appears

  ::

    MEX completed successfully.
  
  A file named *generate_tracks.mexXXX* appears, where *XXX* refers to the operating system of the computer (*w64* for 64-bit Windows, *maci64* for 64-bit Mac OS X, and *a64* for 64-bit Linux).

.. _here: https://www.mathworks.com/matlabcentral/answers/313290-how-do-i-install-mingw-for-use-in-matlab
.. _BioformatsImage: https://biof-git.colorado.edu/core-code/bioformats-image-toolbox/wikis/home
.. _`Github repository`: https://github.com/tianchengzhe/EllipTrack
